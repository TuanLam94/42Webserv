- GET : Demande une ressource specifique -> utilise l'URL
	ex :
		- page HTML
		- image
		- fichier CSS
		- etc
	Le serveur repond en envoyant la ressource demandee si elle est disponible.

GET /index.html HTTP/1.1
Host: www.example.com

Ici, le client demande la ressource /index.html au serveur www.example.com
En general -> pas de body (corps) dans cette requete. Tout est normalement inclus dans l'URL et les en-tete de la requete.
Possibilite de transmettre des informations supplementaires (critere de recherche ou identifiants par exemple). --> se fait via les parametres d'URL appeles --> query string.

GET /search?query=webserv&lang=fr HTTP/1.1
Host: www.example.com

Ici, il y a un mot-cle webserv et la langue fr. ajoutes apres un ?, forme cle/valeur.

Reponse du serveur :
- Code de statut HTTP 
- Contenu de la ressource

Utilisations principales : 
- Recuperer une page web
- Telecharger un fichier
- Requete de recherche

Differents code de statut pour le retour (a voir au fur et a mesure)


Exemple format reponse HTTP from server to client : 

std::string build_response(const std::string& body, const std::string& content_type)
{
    std::stringstream response;
    
    // En-têtes HTTP
    response << "HTTP/1.1 200 OK\r\n";
    response << "Content-Length: " << body.size() << "\r\n";
    response << "Content-Type: " << content_type << "\r\n";
    response << "\r\n";  // Séparateur entre les en-têtes et le corps
    
    // Corps de la réponse (contenu du fichier)
    response << body;
    
    return response.str();
}

1) Extraire les informations de la requete client
2) Trouver le path jusqu'a la ressource demande (root + path_requete)
3) Verifier que le path est valide, et mene jusqu'a une ressource accessible (exist + access)
4) 

Exemple Requete GET : 

Ligne de requete : 

	GET /index.html HTTP/1.1

En-tete HTTP : Fournit des infos supplementaires sur la requete (peuvent influencer la reponse du serveur)
	Host: localhost:8080
	User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8

Utilisation de GET : 
	- Recuperation de pages et de fichiers statiques
	- Gestion des erreurs HTTP (404, 403, 500)
	- Redirections HTTP (301, 302)
	- Support de la gestion des en-test HTTP
	- Support des routes (URI vers fichier)
	- Gestion de la racine du serveur
	- Mise en cache basique (304 not modified)
	- Gestion des chemins et securite
	- Supplement : Pagination et filtrage + Support de fichiers binaires
