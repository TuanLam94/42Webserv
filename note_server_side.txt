- Fichier de configuration : definit le comportement du serveur web (routes, ports, etc)


- Socket() : point de communication pour une connection reseau --> utiliser pour ecouter les communications entrantes des clients. Sert dinterface pour envoyer et recevoir des donnees


- Bind() : Apres creation du socket -> necessite de le rattacher a une adresse specifique et a un port (avec bind()). Associe la socket a une adresse, et a un port, pour que le serveur sache sur quel reseau et quel port ecouter.

- Listen() : Une fois la socket rattache a une adresse et un port, il faut mettre le serveur en mode ecoute (avec listen()). Commencer a ecouter les connexions entrantes sur le port specifie.
Il faut aussi specifier la taille de la file d'attente (nbr de connexion max en attente que le serveur peut gerer avant quelle ne soit refuser).

- Accept() : Fonction qui attend qu'un client se connecte au serveur. Bloque jusqu'a ce qu'une connexion soit etablie, --> puis cree une nouvelle socket dediee a cette nouvelle connexion.
Connexion acceptee = le serveur peut utiliser cette nouvelle socket pour communiquer avec le client, pendant que la socket principale continue decouter les connexions entrantes.

Socket bloquante/non-bloquante : 
	- bloquante : mode par defaut des sockets, si une operation I/O est appelee, le programme attend que cette operation soit terminee avant de continuer. Par exemple, avec read() ou accept(), le programme va bloquer tant quil ny aucune donnee a lire ou tant qu'il n'y a aucune nouvelle connexion. (inefficace dans le cas de connexions multiples)
	- non-bloquante : ne suspend pas le programme si des operatins I/O sont effectuees. Si une operation ne peut pas etre effectue dans l'immediat -> retourne immediatement une valeur speciale ou une erreur --> ainsi le programme peut continue son execution (besoin de surveiller les sockest avec select(), poll(), ou epoll()).
	
	
Lecture/ecriture sur Descripteur de fichier : 
	- Lecture :
		- avec read() ou recv(), lors de la reception d'une requete envoyee par le client.
		- lecture possible, apres detecttion d'un fd pret pour la lecture grace a epoll().
	- Ecriture :
		- avec send() ou write(), apres traitement de la requete HTTP, envoie de la reponse au client via le descripteur de fichier.
		- avec les les connexions persistantes, une fois que le serveur a fini de traiter la requete, il envoie la reponse au client.
	
- Fonctionnement de epoll() : 
	- Creation d'une instance epoll() avec epoll_create(); -> retourne un FD -> tjrs close une fois utiliser
	- EPOLLIN --> permet de dire a epoll() de nous prevenir lorsque des donnees sont pretes a etre lues
	- epoll_ctl : permet de specifier les fd qui doivent etre surveiller (event de I/O), permet de modifier ou de supprimer des fd qui ont ete ajoute a la structure epoll
	- epoll_wait() : utiliser ds une boucle principale (permet dattendre des events I/O sur les fd que lon surveille)
		- une fois appele -> se met en attente jusqu'a recevoir des entrees/sorties prets a etre traites
		- retourne un le nbr de fd pret a etre traite -> ensuite on peut parcourir le tableau devenements afin de gerer tous les evenements signaler
		
- Si 1ere utilisation de accept en mode non-bloquant --> fail car aucune connexion entrante
	- donc on tente de mettre le mode non bloquant apres avoir lier le socket au port.
	
	
	
